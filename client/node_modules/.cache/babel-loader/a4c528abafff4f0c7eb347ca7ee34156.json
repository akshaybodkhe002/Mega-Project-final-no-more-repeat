{"ast":null,"code":"var _jsxFileName = \"/Users/akshaysanjaybodkhe/Downloads/DSTORE-Decentralised-Cloud-Storage-main/client/src/pages/StoreHouse/StoreHouse.js\";\nimport React from \"react\";\nimport Navbar from \"./../../components/NavBar/NavBar\";\nimport Table from \"./Table\";\nimport ipfs from './../../assets/ipfs';\nimport CryptoJS from \"crypto-js\";\nimport { Button } from 'antd';\nimport DropFileInput from './drop-file-input/DropFileInput';\nimport \"./StoreHouse.css\";\nimport getWeb3 from \"./../../getWeb3\";\nimport CloudStorageContract from \"./../../contracts/CloudStorage.json\";\nlet web3 = null;\n\nclass StoreHouse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: null,\n      accounts: null,\n      loading: false,\n      buffer: null,\n      tableData: null,\n      isOpen: false,\n      filesToUpload: [],\n      storagecontract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        web3 = await getWeb3(); // // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = CloudStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(CloudStorageContract.abi, deployedNetwork && deployedNetwork.address);\n        this.setState({\n          web3,\n          accounts,\n          storagecontract: instance\n        });\n        let currentComponent = this; //Get uploaded files\n\n        instance.methods.getFiles(accounts[0]).call().then(function (response) {\n          if (response.length !== 0) {\n            let file,\n                fileData = [{\n              'File Name': '',\n              'File Type': '',\n              'Size': '',\n              'Upload date': '',\n              'Action': ''\n            }];\n            var fname, ftype, fsize, fhash, fdate, fupdate, sharefile;\n\n            for (var i = 0; i < response.length; i++) {\n              fname = response[i]['filename'];\n              ftype = fname.split(\".\").slice(-1);\n              ftype = ftype.toString().toUpperCase();\n              fsize = response[i]['filesize'] + \"B\";\n              fhash = response[i]['ipfshash'];\n              fdate = response[i]['uploaddate'];\n              fdate = new Date(fdate * 1000);\n              fupdate = fdate.getDate() + \"-\" + (fdate.getMonth() + 1) + \"-\" + fdate.getFullYear();\n              console.log(fname, fhash);\n              sharefile = [fname, response[i]['filesize'], fhash];\n              file = {\n                'File Name': fname,\n                'File Type': ftype,\n                'Size': fsize,\n                'Upload date': fupdate,\n                'Action': React.createElement(\"div\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 72\n                  },\n                  __self: this\n                }, React.createElement(Button, {\n                  size: \"small\",\n                  className: \"btn-hover\",\n                  type: \"primary\",\n                  onClick: () => currentComponent.handleDownload(fname, fhash),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 73\n                  },\n                  __self: this\n                }, \"Download\"), \"\\xA0\\xA0\", React.createElement(Button, {\n                  size: \"small\",\n                  className: \"btn-hover\",\n                  type: \"primary\",\n                  onClick: () => currentComponent.handleShare(sharefile),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 75\n                  },\n                  __self: this\n                }, \"Share\"))\n              };\n              fileData.push(file);\n            }\n\n            currentComponent.setState({\n              tableData: fileData\n            });\n            console.log(\"Table\", currentComponent.state.tableData);\n          }\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.addNewFile = async (filename, filesize, uploaddate, ipfshash) => {\n      const contract = this.state.storagecontract;\n      const metamaskAddr = this.state.accounts[0];\n      await contract.methods.addFile(filename, filesize.toString(), Math.floor(uploaddate), ipfshash).send({\n        from: metamaskAddr\n      });\n      window.location.reload();\n    };\n\n    this.onUploadSubmit = async () => {\n      var file, password, reader, wordArray, encrypted, ipfshash;\n\n      if (this.filesToUpload !== []) {\n        for (var i = 0; i < this.filesToUpload.length; i++) {\n          file = this.filesToUpload[i];\n          password = prompt(\"Enter password for \" + file['name']);\n          if (password == null) return;\n          console.log(file['name'], password);\n          reader = new window.FileReader();\n          reader.readAsArrayBuffer(file);\n\n          reader.onload = () => {\n            console.log(reader.result); // Convert: ArrayBuffer -> WordArray\n\n            wordArray = CryptoJS.lib.WordArray.create(reader.result); // Encryption: I: WordArray -> O: -> Base64 encoded string (OpenSSL-format)         \n\n            encrypted = CryptoJS.AES.encrypt(wordArray, password).toString();\n            ipfs.files.add(Buffer(encrypted), (error, result) => {\n              if (error) {\n                console.error(error);\n                return;\n              }\n\n              ipfshash = result[0].hash;\n              console.log('ifpsHash', result[0].hash);\n              var date = new Date().getTime();\n              var dateUnixTimestamp = date / 1000;\n              console.log(file['name'], file['size'], date, dateUnixTimestamp, ipfshash);\n              this.addNewFile(file['name'], file['size'], dateUnixTimestamp, ipfshash);\n            });\n          };\n        }\n      } else {\n        alert(\"Select files to upload\");\n      }\n    };\n\n    this.handleShare = async file => {\n      var address = prompt(\"Enter address of the user receiving \" + file[0]);\n      if (address == null) return;\n\n      try {\n        //shareFile(address _toaddr, string memory filename, string memory filesize, uint256 uploaddate, string memory ipfshash)\n        const contract = this.state.storagecontract;\n        const metamaskAddr = this.state.accounts[0];\n        var date = new Date().getTime();\n        var dateUnixTimestamp = date / 1000;\n        await contract.methods.shareFile(address, file[0], file[1], Math.floor(dateUnixTimestamp), file[2]).send({\n          from: metamaskAddr\n        });\n        alert(\"File sent to \" + address);\n      } catch (error) {\n        alert(\"Invalid metamask address\" + error);\n        return;\n      }\n    };\n\n    this.handleDownload = async (fname, fhash) => {\n      let password = prompt(\"Enter password for \" + fname);\n      if (password == null) return;\n      ipfs.files.get(fhash, function (err, files) {\n        files.forEach(function callback(file) {\n          console.log(file.path);\n          console.log(\"File content >> \", file.content.toString('utf8'));\n          var decrypted = CryptoJS.AES.decrypt(file.content.toString('utf8'), password);\n          console.log(decrypted);\n          let wordArray = decrypted;\n          var arrayOfWords = wordArray.hasOwnProperty(\"words\") ? wordArray.words : [];\n          var length = wordArray.hasOwnProperty(\"sigBytes\") ? wordArray.sigBytes : arrayOfWords.length * 4;\n          var uInt8Array = new Uint8Array(length),\n              index = 0,\n              word,\n              i;\n\n          for (i = 0; i < length; i++) {\n            word = arrayOfWords[i];\n            uInt8Array[index++] = word >> 24;\n            uInt8Array[index++] = word >> 16 & 0xff;\n            uInt8Array[index++] = word >> 8 & 0xff;\n            uInt8Array[index++] = word & 0xff;\n          }\n\n          let typedArray = uInt8Array;\n          console.log(typedArray);\n\n          var downloadBlob = function (data, fileName, mimeType) {\n            var blob, url;\n            blob = new Blob([data], {\n              type: mimeType\n            });\n            url = window.URL.createObjectURL(blob);\n            downloadURL(url, fileName);\n            setTimeout(function () {\n              return window.URL.revokeObjectURL(url);\n            }, 1000);\n          };\n\n          var downloadURL = function (data, fileName) {\n            var a;\n            a = document.createElement('a');\n            a.href = data;\n            a.download = fileName;\n            document.body.appendChild(a);\n            a.style = 'display: none';\n            a.click();\n            a.remove();\n          };\n\n          downloadBlob(typedArray, \"\".concat(fname));\n        });\n      });\n      this.setState({\n        visiblepd: false,\n        confirmLoadingpd: false\n      });\n    };\n\n    this.state = {\n      web3: null,\n      buffer: null,\n      account: null,\n      tableData: [{\n        'File Name': '',\n        'File Type': '',\n        'Size': '',\n        'Upload date': '',\n        'Action': ''\n      }]\n    };\n  }\n\n  onFileChange(files) {\n    console.log(files);\n    this.filesToUpload = files;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"StoreHouse\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"FileTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(Table, {\n      data: this.state.tableData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"upload_box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(DropFileInput, {\n      onFileChange: files => this.onFileChange(files),\n      onUploadSubmit: files => this.onUploadSubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default StoreHouse;","map":{"version":3,"sources":["/Users/akshaysanjaybodkhe/Downloads/DSTORE-Decentralised-Cloud-Storage-main/client/src/pages/StoreHouse/StoreHouse.js"],"names":["React","Navbar","Table","ipfs","CryptoJS","Button","DropFileInput","getWeb3","CloudStorageContract","web3","StoreHouse","Component","constructor","props","state","accounts","loading","buffer","tableData","isOpen","filesToUpload","storagecontract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","currentComponent","methods","getFiles","call","then","response","length","file","fileData","fname","ftype","fsize","fhash","fdate","fupdate","sharefile","i","split","slice","toString","toUpperCase","Date","getDate","getMonth","getFullYear","console","log","handleDownload","handleShare","push","error","alert","addNewFile","filename","filesize","uploaddate","ipfshash","contract","metamaskAddr","addFile","Math","floor","send","from","window","location","reload","onUploadSubmit","password","reader","wordArray","encrypted","prompt","FileReader","readAsArrayBuffer","onload","result","lib","WordArray","create","AES","encrypt","files","add","Buffer","hash","date","getTime","dateUnixTimestamp","shareFile","get","err","forEach","callback","path","content","decrypted","decrypt","arrayOfWords","hasOwnProperty","words","sigBytes","uInt8Array","Uint8Array","index","word","typedArray","downloadBlob","data","fileName","mimeType","blob","url","Blob","type","URL","createObjectURL","downloadURL","setTimeout","revokeObjectURL","a","document","createElement","href","download","body","appendChild","style","click","remove","visiblepd","confirmLoadingpd","account","onFileChange","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"./../../components/NavBar/NavBar\";\r\nimport Table from \"./Table\";\r\nimport ipfs from './../../assets/ipfs'\r\nimport CryptoJS from \"crypto-js\";\r\nimport { Button } from 'antd';\r\nimport DropFileInput from './drop-file-input/DropFileInput';\r\nimport \"./StoreHouse.css\"\r\n\r\nimport getWeb3 from \"./../../getWeb3\";\r\nimport CloudStorageContract from \"./../../contracts/CloudStorage.json\";\r\n\r\nlet web3 = null;\r\n\r\nclass StoreHouse extends React.Component {\r\n\r\n  state = {\r\n    web3: null, accounts: null, loading: false, buffer: null, tableData: null,\r\n    isOpen: false, filesToUpload: [], storagecontract: null\r\n  };\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      web3: null,\r\n      buffer: null,\r\n      account: null,\r\n      tableData: [{ 'File Name': '', 'File Type': '', 'Size': '', 'Upload date': '', 'Action': '' }]\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      web3 = await getWeb3();\r\n      // // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = CloudStorageContract.networks[networkId];\r\n\r\n      const instance = new web3.eth.Contract(\r\n        CloudStorageContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      this.setState({ web3, accounts, storagecontract: instance });\r\n\r\n      let currentComponent = this;\r\n      //Get uploaded files\r\n      instance.methods.getFiles(accounts[0]).call()\r\n        .then(function (response) {\r\n          if (response.length !== 0) {\r\n            let file, fileData = [{ 'File Name': '', 'File Type': '', 'Size': '', 'Upload date': '', 'Action': '' }];\r\n            var fname, ftype, fsize, fhash, fdate, fupdate, sharefile;\r\n            for (var i = 0; i < response.length; i++) {\r\n\r\n              fname = response[i]['filename']\r\n              ftype = fname.split(\".\").slice(-1)\r\n              ftype = ftype.toString().toUpperCase()\r\n              fsize = response[i]['filesize'] + \"B\"\r\n              fhash = response[i]['ipfshash']\r\n              fdate = response[i]['uploaddate']\r\n              fdate = new Date(fdate * 1000);\r\n              fupdate = fdate.getDate() + \"-\" + (fdate.getMonth() + 1) + \"-\" + fdate.getFullYear();\r\n              console.log(fname, fhash)\r\n\r\n              sharefile = [fname, response[i]['filesize'], fhash]\r\n              file = {\r\n                'File Name': fname, 'File Type': ftype, 'Size': fsize, 'Upload date': fupdate,\r\n                'Action': <div>\r\n                  <Button size=\"small\" className=\"btn-hover\" type=\"primary\" onClick={() => currentComponent.handleDownload(fname, fhash)}>Download</Button>\r\n                  &nbsp;&nbsp;\r\n                  <Button size=\"small\" className=\"btn-hover\" type=\"primary\" onClick={() => currentComponent.handleShare(sharefile)}>Share</Button>\r\n                </div>\r\n              }\r\n\r\n              fileData.push(file);\r\n            }\r\n            currentComponent.setState({ tableData: fileData })\r\n            console.log(\"Table\", currentComponent.state.tableData)\r\n          }\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // toggleModal = async () => {\r\n  //   this.isOpen = !this.isOpen;\r\n  // }\r\n\r\n  //addFile(bytes32 filename, bytes32 filesize, uint256 uploaddate, bytes32 ipfshash)\r\n  addNewFile = async (filename, filesize, uploaddate, ipfshash) => {\r\n    const contract = this.state.storagecontract;\r\n    const metamaskAddr = this.state.accounts[0];\r\n\r\n    await contract.methods.addFile(filename, filesize.toString(),\r\n      Math.floor(uploaddate), ipfshash).send({ from: metamaskAddr })\r\n\r\n    window.location.reload();\r\n  }\r\n\r\n\r\n  onFileChange(files) {\r\n    console.log(files);\r\n    this.filesToUpload = files;\r\n  }\r\n\r\n  onUploadSubmit = async () => {\r\n    var file, password, reader, wordArray, encrypted, ipfshash;\r\n    if (this.filesToUpload !== []) {\r\n      for (var i = 0; i < this.filesToUpload.length; i++) {\r\n\r\n        file = this.filesToUpload[i]\r\n        password = prompt(\"Enter password for \" + file['name'])\r\n        if (password == null)\r\n          return\r\n        console.log(file['name'], password)\r\n        reader = new window.FileReader()\r\n        reader.readAsArrayBuffer(file)\r\n\r\n        reader.onload = () => {\r\n          console.log(reader.result);\r\n          // Convert: ArrayBuffer -> WordArray\r\n          wordArray = CryptoJS.lib.WordArray.create(reader.result);\r\n          // Encryption: I: WordArray -> O: -> Base64 encoded string (OpenSSL-format)         \r\n          encrypted = CryptoJS.AES.encrypt(wordArray, password).toString();\r\n\r\n          ipfs.files.add(Buffer(encrypted), (error, result) => {\r\n            if (error) {\r\n              console.error(error)\r\n              return\r\n            }\r\n\r\n            ipfshash = result[0].hash\r\n            console.log('ifpsHash', result[0].hash)\r\n\r\n            var date = (new Date()).getTime();\r\n            var dateUnixTimestamp = date / 1000;\r\n            console.log(file['name'], file['size'], date, dateUnixTimestamp, ipfshash)\r\n\r\n            this.addNewFile(file['name'], file['size'], dateUnixTimestamp, ipfshash)\r\n          })\r\n\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      alert(\"Select files to upload\")\r\n    }\r\n  }\r\n\r\n\r\n  handleShare = async (file) => {\r\n    var address = prompt(\"Enter address of the user receiving \" + file[0])\r\n    if (address == null)\r\n      return\r\n\r\n    try {\r\n      //shareFile(address _toaddr, string memory filename, string memory filesize, uint256 uploaddate, string memory ipfshash)\r\n      const contract = this.state.storagecontract;\r\n      const metamaskAddr = this.state.accounts[0];\r\n\r\n      var date = (new Date()).getTime();\r\n      var dateUnixTimestamp = date / 1000;\r\n\r\n      await contract.methods.shareFile(address, file[0], file[1],\r\n        Math.floor(dateUnixTimestamp), file[2]).send({ from: metamaskAddr })\r\n\r\n      alert(\"File sent to \" + address)\r\n\r\n    }\r\n    catch (error) {\r\n      alert(\"Invalid metamask address\" + error)\r\n      return;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  handleDownload = async (fname, fhash) => {\r\n    let password = prompt(\"Enter password for \" + fname)\r\n    if (password == null)\r\n      return\r\n    ipfs.files.get(fhash, function (err, files) {\r\n      files.forEach(function callback(file) {\r\n        console.log(file.path)\r\n        console.log(\"File content >> \", file.content.toString('utf8'))\r\n        var decrypted = CryptoJS.AES.decrypt(file.content.toString('utf8'), password);\r\n        console.log(decrypted);\r\n        let wordArray = decrypted;\r\n        var arrayOfWords = wordArray.hasOwnProperty(\"words\") ? wordArray.words : [];\r\n        var length = wordArray.hasOwnProperty(\"sigBytes\") ? wordArray.sigBytes : arrayOfWords.length * 4;\r\n        var uInt8Array = new Uint8Array(length), index = 0, word, i;\r\n        for (i = 0; i < length; i++) {\r\n          word = arrayOfWords[i];\r\n          uInt8Array[index++] = word >> 24;\r\n          uInt8Array[index++] = (word >> 16) & 0xff;\r\n          uInt8Array[index++] = (word >> 8) & 0xff;\r\n          uInt8Array[index++] = word & 0xff;\r\n        }\r\n        let typedArray = uInt8Array;\r\n        console.log(typedArray);\r\n        var downloadBlob = function (data, fileName, mimeType) {\r\n          var blob, url;\r\n          blob = new Blob([data], {\r\n            type: mimeType\r\n          });\r\n          url = window.URL.createObjectURL(blob);\r\n          downloadURL(url, fileName);\r\n          setTimeout(function () {\r\n            return window.URL.revokeObjectURL(url);\r\n          }, 1000);\r\n        };\r\n        var downloadURL = function (data, fileName) {\r\n          var a;\r\n          a = document.createElement('a');\r\n          a.href = data;\r\n          a.download = fileName;\r\n          document.body.appendChild(a);\r\n          a.style = 'display: none';\r\n          a.click();\r\n          a.remove();\r\n        };\r\n        downloadBlob(typedArray, `${fname}`);\r\n\r\n      })\r\n    })\r\n    this.setState({\r\n      visiblepd: false,\r\n      confirmLoadingpd: false,\r\n\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"StoreHouse\">\r\n        <Navbar />\r\n        {/*<h1 className=\"StoreHouse\">Uploaded Files</h1>*/}\r\n        <br /><br />\r\n        <div className=\"FileTable\">\r\n          <Table data={this.state.tableData} />\r\n        </div>\r\n\r\n        <br /><br />\r\n\r\n        <div className=\"upload_box\">\r\n          <DropFileInput\r\n            onFileChange={(files) => this.onFileChange(files)}\r\n            onUploadSubmit={(files) => this.onUploadSubmit()}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default StoreHouse;"]},"metadata":{},"sourceType":"module"}